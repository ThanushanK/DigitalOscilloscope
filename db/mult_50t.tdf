--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" DSP_BLOCK_BALANCING="Auto" INPUT_A_IS_CONSTANT="NO" INPUT_B_IS_CONSTANT="NO" LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=39 LPM_WIDTHB=4 LPM_WIDTHP=43 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 11.1SP2 cbx_cycloneii 2012:01:25:21:14:56:SJ cbx_lpm_add_sub 2012:01:25:21:14:56:SJ cbx_lpm_mult 2012:01:25:21:14:56:SJ cbx_mgl 2012:01:25:21:17:49:SJ cbx_padd 2012:01:25:21:14:56:SJ cbx_stratix 2012:01:25:21:14:56:SJ cbx_stratixii 2012:01:25:21:14:56:SJ cbx_util_mgl 2012:01:25:21:14:56:SJ  VERSION_END


-- Copyright (C) 1991-2011 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION cycloneii_mac_mult (aclr, clk, dataa[dataa_width-1..0], datab[datab_width-1..0], ena, signa, signb)
WITH ( dataa_clock, dataa_width, datab_clock, datab_width, signa_clock, signb_clock)
RETURNS ( dataout[dataa_width+datab_width-1..0]);
FUNCTION cycloneii_mac_out (aclr, clk, dataa[dataa_width-1..0], ena)
WITH ( dataa_width = 0, output_clock)
RETURNS ( dataout[dataa_width-1..0]);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = dsp_9bit 5 lut 48 
SUBDESIGN mult_50t
( 
	dataa[38..0]	:	input;
	datab[3..0]	:	input;
	result[42..0]	:	output;
) 
VARIABLE
	add11_result[21..0]	:	WIRE;
	add7_result[25..0]	:	WIRE;
	mac_mult1 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 4,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult3 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 4,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult5 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 3,
			datab_clock = "none",
			datab_width = 4,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_out2 : cycloneii_mac_out
		WITH (
			dataa_width = 22,
			output_clock = "none"
		);
	mac_out4 : cycloneii_mac_out
		WITH (
			dataa_width = 22,
			output_clock = "none"
		);
	mac_out6 : cycloneii_mac_out
		WITH (
			dataa_width = 7,
			output_clock = "none"
		);
	sft10a[25..0] : soft;
	sft12a[21..0] : soft;
	sft13a[21..0] : soft;
	sft14a[21..0] : soft;
	sft8a[25..0] : soft;
	sft9a[25..0] : soft;
	w120w	: WIRE;
	w144w	: WIRE;
	w305w[43..0]	: WIRE;

BEGIN 
	add11_result[] = sft12a[].out + sft13a[].out;
	add7_result[] = sft8a[].out + sft9a[].out;
	mac_mult1.dataa[] = ( dataa[17..0]);
	mac_mult1.datab[] = ( datab[3..0]);
	mac_mult1.signa = B"0";
	mac_mult1.signb = B"1";
	mac_mult3.dataa[] = ( dataa[35..18]);
	mac_mult3.datab[] = ( datab[3..0]);
	mac_mult3.signa = B"0";
	mac_mult3.signb = B"1";
	mac_mult5.dataa[] = ( dataa[38..36]);
	mac_mult5.datab[] = ( datab[3..0]);
	mac_mult5.signa = B"1";
	mac_mult5.signb = B"1";
	mac_out2.dataa[] = mac_mult1.dataout[];
	mac_out4.dataa[] = mac_mult3.dataout[];
	mac_out6.dataa[] = mac_mult5.dataout[];
	sft10a[].in = add7_result[];
	sft12a[].in = ( w144w, ( mac_out6.dataout[5..5], ( mac_out6.dataout[4..4], ( (! mac_out4.dataout[21..21]), ( w120w, ( w120w, ( w120w, ( mac_out4.dataout[17..17], ( mac_out4.dataout[16..16], ( mac_out4.dataout[15..15], ( mac_out4.dataout[14..14], ( mac_out4.dataout[13..13], ( mac_out4.dataout[12..12], ( mac_out4.dataout[11..11], ( mac_out4.dataout[10..10], ( mac_out4.dataout[9..9], ( mac_out4.dataout[8..8], ( mac_out4.dataout[7..7], ( mac_out4.dataout[6..6], ( mac_out4.dataout[5..5], ( mac_out4.dataout[4..4], w120w)))))))))))))))))))));
	sft13a[].in = ( w144w, ( w144w, ( w144w, ( w144w, ( mac_out6.dataout[2..2], ( mac_out6.dataout[1..1], ( mac_out6.dataout[0..0], ( w144w, ( w144w, ( w144w, ( w144w, ( w144w, ( w144w, ( w144w, ( w144w, ( w144w, ( w144w, ( w144w, ( w144w, ( w144w, ( w144w, mac_out4.dataout[3..3])))))))))))))))))))));
	sft14a[].in = add11_result[];
	sft8a[].in = ( w120w, ( (! mac_out6.dataout[6..6]), ( w120w, ( w120w, ( mac_out6.dataout[3..3], ( mac_out4.dataout[20..20], ( mac_out4.dataout[19..19], ( mac_out4.dataout[18..18], ( w120w, ( w120w, ( w120w, ( w120w, ( w120w, ( w120w, ( w120w, ( w120w, ( w120w, ( w120w, ( w120w, ( w120w, ( w120w, ( w120w, ( (! mac_out2.dataout[21..21]), ( mac_out2.dataout[20..20], ( mac_out2.dataout[19..18])))))))))))))))))))))))));
	sft9a[].in = ( w144w, ( sft14a[21..21].out, ( sft14a[20..20].out, ( sft14a[19..19].out, ( sft14a[18..18].out, ( sft14a[17..17].out, ( sft14a[16..16].out, ( sft14a[15..15].out, ( sft14a[14..14].out, ( sft14a[13..13].out, ( sft14a[12..12].out, ( sft14a[11..11].out, ( sft14a[10..10].out, ( sft14a[9..9].out, ( sft14a[8..8].out, ( sft14a[7..7].out, ( sft14a[6..6].out, ( sft14a[5..5].out, ( sft14a[4..4].out, ( sft14a[3..3].out, ( sft14a[2..2].out, ( sft14a[1..1].out, ( sft14a[0..0].out, ( mac_out4.dataout[2..2], ( mac_out4.dataout[1..0])))))))))))))))))))))))));
	result[42..0] = w305w[42..0];
	w120w = B"1";
	w144w = B"0";
	w305w[] = ( sft10a[25..24].out, sft10a[23..22].out, sft10a[21..20].out, sft10a[19..18].out, sft10a[17..16].out, sft10a[15..14].out, sft10a[13..12].out, sft10a[11..10].out, sft10a[9..8].out, sft10a[7..6].out, sft10a[5..4].out, sft10a[3..2].out, sft10a[1..0].out, mac_out2.dataout[17..17], mac_out2.dataout[16..16], mac_out2.dataout[15..15], mac_out2.dataout[14..14], mac_out2.dataout[13..13], mac_out2.dataout[12..12], mac_out2.dataout[11..11], mac_out2.dataout[10..10], mac_out2.dataout[9..9], mac_out2.dataout[8..8], mac_out2.dataout[7..7], mac_out2.dataout[6..6], mac_out2.dataout[5..5], mac_out2.dataout[4..4], mac_out2.dataout[3..3], mac_out2.dataout[2..2], mac_out2.dataout[1..1], mac_out2.dataout[0..0]);
END;
--VALID FILE
